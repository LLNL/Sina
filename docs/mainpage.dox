namespace mnoda {
/**
\mainpage Mnoda C++ Library

The mnoda C++ library can read and write JSON files in the mnoda schema. It
can be used by simulation applications to summarize run data to be ingested
into a database using the Sina tool suite.

The top-level object in the mnoda schema is the Document. It contains lists
of Record and Relationship objects.

\code

#include "mnoda/mnoda.hpp"

int main (void) {
    // Create a new document
    mnoda::Document document;

    // Create a run of "My Sim Code" version "1.2.3", which was run by "jdoe".
    // The run has an ID of "run1", which has to be unique to this file.
    // There can be different types of records, so we allocate them dynamically.
    mnoda::ID run1ID{"run1", mnoda::IDType::Local};
    std::unique_ptr<mnoda::Record> run1{new mnoda::Run{run1ID, "My Sim Code", "1.2.3", "jdoe"}};

    // Add the run to the document
    document.add(std::move(run1));

    // Create and add another run
    mnoda::ID run2ID{"run2", mnoda::IDType::Local};
    // std::unique_ptr is used with Record entries to avoid object slicing, as Records can be subclassed
    std::unique_ptr<mnoda::Record> run2{new mnoda::Run{run2ID, "My Sim Code", "1.2.3", "jdoe"}};
    document.add(std::move(run2));

    // Add a relationship between the runs showing that 1 came before 2
    mnoda::Relationship oneBeforeTwo{run1ID, "comes before", run2ID};
    document.add(oneBeforeTwo);

    // Save everything
    save(document, "MyMnodaData.json");

    // Pretty-print the document
    std::cout << document.toJson().dump(4) << std::endl;

}

\endcode

After running the above, the file "MyMnodaData.json" will contain the
following:

\code{.json}
{
    "records": [
        {
            "application": "My Sim Code",
            "local_id": "run1",
            "type": "run",
            "user": "jdoe",
            "version": "1.2.3"
        },
        {
            "application": "My Sim Code",
            "local_id": "run2",
            "type": "run",
            "user": "jdoe",
            "version": "1.2.3"
        }
    ],
    "relationships": [
        {
            "local_object": "run2",
            "local_subject": "run1",
            "predicate": "comes before"
        }
    ],
    "user_defined": null
}
\endcode

For creating more complex objects with all the parts of the mnoda schema,
see the documentation for File, Value, and the user-defined content of Record.
An example of some more complex functionality can also be found below. When run,
this will print out example JSON consisting of one task with a global id and ten
runs with local ids, for a total of eleven Records, plus ten Relationships between
them.

\code
#include <vector>
#include <cstdlib>
#include <iostream>
#include <string>

#include "mnoda/mnoda.hpp"

int main() {
    // Define some names for Values
    std::vector<std::string> valueNames{"length", "width", "height"};
    // Create the Document we'll be adding to
    mnoda::Document exampleDocument;

    // Create the Record (type: task) that will "contain" the Runs
    mnoda::ID exampleTaskId{"example_task", mnoda::IDType::Global};
    std::unique_ptr<mnoda::Record> exampleTask{new mnoda::Record{exampleTaskId, "task"}};

    // Loop for creating Runs and Relationships
    for(int i = 0; i < 10; i++) {
        // Create the Run ID and the Run itself
        mnoda::ID exampleRunId{"example_run_"+std::to_string(i), mnoda::IDType::Local};
        std::unique_ptr<mnoda::Record> exampleRun{new mnoda::Run{exampleRunId, "example_app", "1.2", "jdoe"}};

        // Add a few Values to the Run
        for(auto &valueName : valueNames){
            double randomVal = std::rand();
            mnoda::Value exampleVal{valueName, randomVal};
            exampleRun->add(exampleVal);
        }   
        // Add a File to the Run
        mnoda::File exampleFile{"/foo/bar/summary_"+std::to_string(i)+".txt","text/plain"};
        exampleRun->add(exampleFile);

        // Make a Relationship linking the Run and its containing Record
        mnoda::Relationship exampleRelationship{exampleTaskId, "contains", exampleRunId};

        // Add the Relationship and Run to the Document
        exampleDocument.add(exampleRelationship);
        exampleDocument.add(std::move(exampleRun));
    }   

    // Add the Task to the Document
    exampleDocument.add(std::move(exampleTask));

    // Print the JSON
    std::cout << exampleDocument.toJson().dump(4) << std::endl;
}
\endcode
*/


}
