# Define NETWORK if you are on an LC system and either can't or don't want to
# use their wheelhouses.  For example,
#
# - build:  make NETWORK=scf
# - tests:  make tests NETWORK=scf
#
# Note that use of scf has special meaning until we resolve installation issues
# or establish a more flexible build process.

# Determine if we are on an LC system based on the presence of the wheelhouse
# Using 'wget --spider' versus curl as it is MUCH faster.
# (Inspiration: https://stackoverflow.com/questions/12199059)
HAVE_WHEELHOUSE=$(shell if wget --spider https://www-lc.llnl.gov/python/wheelhouse 2> /dev/null; then echo 1; else echo 0; fi)

NO_LINKS_FILE=no-links.txt
LC_LINKS_FILE=lc-links.txt
LINKS_FILE=requirements/links.txt

# Work-around for LC Python 3.6 installation-related issues for testing purposes
LC_PYTHON3=/usr/apps/python-3.6.0/bin
HAVE_LC_PY3=$(shell if test -d $(LC_PYTHON3); then echo 1; else echo 0; fi)
ifeq ($(HAVE_LC_PY3),1)
  TEST_PATH:=$(LC_PYTHON3):$(PATH)
else
  TEST_PATH:=$(PATH)
endif

SHELL=/bin/bash

VENV?=venv
VACT=$(VENV)/bin/activate
PR_ACT="Enter 'source $(VACT)' or 'source $(VACT).csh' to activate the virtual env"

TEST_VENV=tests/test_venv

.PHONY: all
.PHONY: clean
.PHONY: clean-files
.PHONY: clean-notebooks
.PHONY: clean-tests
.PHONY: clean-tests-venv
.PHONY: docs
.PHONY: install
.PHONY: links
.PHONY: tests

# TODO: Continue to install Jupyter requirements outside the wheelhouse until
# SIBO-537 work is done, where a separate requirements/jupyter.txt file is
# defined and optionally included.
install: links
	@if test ! -d $(VENV); then \
	  echo "Making virtual environment in $(VENV)"; \
	  python -m virtualenv $(VENV); \
	  set -e; \
	else \
	  echo "You already have the virtual environment $(VENV)"; \
	fi; \
	$(VENV)/bin/pip install --upgrade pip; \
	$(VENV)/bin/pip install -r requirements/development.txt; \
	if test -z "$(NETWORK)"; then \
	  $(VENV)/bin/pip install -e .[jupyter]; \
	fi; \
	echo $(PR_ACT)

all: clean docs tests

docs: install
	@$(VENV)/bin/tox -e docs

# Ensure the appropriate requirement links are established.  This is important
# for building and testing purposes.
links:
	@if [ $(HAVE_WHEELHOUSE) == 0 ]; then \
	  echo "No LC wheelhouse: using $(NO_LINKS_FILE)"; \
	  ln -sf $(NO_LINKS_FILE) $(LINKS_FILE); \
	else \
	  if test -z "$(NETWORK)"; then \
	    echo "NETWORK unspecified: using $(LC_LINKS_FILE)"; \
	    ln -sf $(LC_LINKS_FILE) $(LINKS_FILE); \
	  else \
	    echo "NETWORK=$(NETWORK): using $(NO_LINKS_FILE)"; \
	    ln -sf $(NO_LINKS_FILE) $(LINKS_FILE); \
	  fi; \
	fi


# Set up a clean test virtual environment before running tests.

# Recursively call make to ensure the work is done in the specified order
tests: export PATH=$(TEST_PATH)
tests: links
	@make --no-print-directory clean-tests-venv; \
	make --no-print-directory install VENV=$(TEST_VENV); \
	$(TEST_VENV)/bin/tox

# Recursively call make to ensure the work is done in the specified order
clean:
	@make --no-print-directory clean-notebooks; \
	make --no-print-directory clean-files

clean-files:  clean-tests
	@echo "Cleaning build files.."; \
	rm -rf build; \
	rm -f requirements/links.txt; \
	echo "Cleaning egg and $(VENV).."; \
	rm -rf sina.egg-info $(VENV); \
	echo "Cleaning python bytecode.."; \
	find . -name __pycache__ -o -name "*.pyc" -exec rm -rf {} \; >& /dev/null

# It is assumed any version/installation of Jupyter will properly remove outputs
# and that we do not want to have to [re-]install the virtual environment just
# to remove outputs from notebooks.
clean-notebooks:
	@echo "Removing any outputs from notebooks.."; \
	NOTEBOOKS=`find ../examples -name "*.ipynb" -print`; \
	JUPYTER_EXE=`which jupyter 2> /dev/null`; \
	NBCONVERT="--ClearOutputPreprocessor.enabled=True --log-level WARN --inplace"; \
	if test -f $(VENV)/bin/jupyter; then \
	  $(VENV)/bin/jupyter nbconvert $$NBCONVERT $$NOTEBOOKS; \
	elif test -n "$$JUPYTER_EXE" && test -f $$JUPYTER_EXE; then \
	  $$JUPYTER_EXE nbconvert $$NBCONVERT $$NOTEBOOKS; \
	else \
	  echo "Sina must be installed to clean notebooks.  Run 'make'."; \
	fi

# The tests target currently builds the docs so remove them too.
clean-tests: clean-tests-venv
	@echo "Cleaning files generated by tests target.."; \
	rm -rf .tox fake.sqlite nosetests*.xml*; \
	echo "Cleaning tox-generated docs directories.."; \
	rm -rf docs/build docs/source/generated_docs; \
	echo "Cleaning example tests.."; \
	rm -rf tests/run_tests

clean-tests-venv:
	@echo "Removing generated test virtual environment.."; \
	rm -rf $(TEST_VENV)
