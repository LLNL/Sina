# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# before running "tox".

# Running "tox" from the python source directory will:
#   - Create a sina source distribution (setup.py sdist)
#   - For every supported version of Python:
#     o Create a virtualenv in .tox/py$VERSION and install dependencies
#     o Use pip to install Sina into the virtualenv
#     o Run sina tests

# To run against a specific subset of Python versions, such as py27, use:
#    tox -e py27

[tox]
envlist = py27
          py36

[testenv]
setenv =
# Set up a Jupyter notebook kernel for testing, where it is assumed there is
# only one test build at a time for the [workflow] account.
    SINA_TEST_KERNEL = {env:SINA_TEST_KERNEL:sina-test}
    HOME = {env:HOME}
commands =
    sh tests/set_jupyter_kernel.sh {env:SINA_TEST_KERNEL} {envdir}
    nosetests --with-xunit --xunit-file nosetests-{envname}.xml -a '!cassandra'
    sed -i.bak 's/testcase classname="\([^"]*\)/testcase classname="\1_{envname}/g' nosetests-{envname}.xml
deps =
    nose
    sqlalchemy
    mock
    -rrequirements.txt
extras = jupyter
whitelist_externals=
    sed
    sh

[testenv:docs]
# Closely based on c2c tox.ini, workaround for LC Sphinx not supporting failing on warning
whitelist_externals=
    mkdir
    bash

# Have Sphinx skip documentation for Jupyter Notebook tests for now since it
# appears other tools are needed (e.g., nbsphinx).
commands=
# If the build succeeds, the files built here will be deployed as documentation
    mkdir -p build
    bash -c "sphinx-apidoc -efT -o docs/source/generated_docs sina/ .tox/"
    bash -c "sphinx-apidoc -efT -o docs/source/generated_docs tests/ .tox/  tests/jupyter_test.py"
    bash -c "sphinx-build docs/source docs/build/html | tee build/sphinx_out.txt"
    # Fail on warnings
    bash -c "! grep  -i WARNING build/sphinx_out.txt"
    # Fail on bad indentation
    bash -c "! egrep -Rl ':(param|return|ref)' docs/build/html/**/*.html"
