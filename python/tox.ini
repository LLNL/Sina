# Reminder:  Running "tox" from the python source directory will:
#   - Create a sina source distribution (setup.py sdist)
#   - For every supported version of Python:
#     o Create a virtualenv in .tox/py$VERSION and install dependencies;
#     o Use pip to install Sina into this virtualenv; and
#     o Run sina tests.

[tox]
# SIBO-231:  Add cassandra to the list once it can be run automatically
envlist = py{37}-{core,cli_tools,jupyter}
          flake8
          docs
          pylint
skip_missing_interpreters = true

[testenv]
passenv = SINA_PIP_OPTIONS SINA_MYSQL_TEST_CONNECTION

setenv =
# Set up a Jupyter notebook kernel for testing, where it is assumed there is
# only one test build at a time for the [workflow] account.
    jupyter: SINA_TEST_KERNEL = {env:SINA_TEST_KERNEL:sina-test}
    jupyter: HOME = {env:HOME}

commands =
    core: nosetests --with-xunit --xunit-file nosetests-{envname}.xml -a '!cassandra','!jupyter','!cli_tools','!mysql'

    ## SIBO-715: Cassandra needs to be integrated into the regression testing
    # environment and the following needs to be tested by someone who can
    # actually run cassandra tests.
    #
    # Use the makefile to properly add cassandra to the test virtual environment
    # to by-pass a tox setup issue with optional requirements that can arise
    # in some LC environments.
    cassandra: make cassandra VENV={envdir}
    cassandra: nosetests --with-xunit --xunit-file nosetests-{envname}.xml -a 'cassandra'

    mysql: make mysql VENV={envdir}
    mysql: nosetests --with-xunit --xunit-file nosetests-{envname}.xml -a 'mysql'

    # Use the makefile to properly add cli_tools to the test virtual environment
    # to by-pass a tox setup issue with optional requirements that can arise
    # in some LC environments.
    cli_tools: make cli_tools VENV={envdir}
    cli_tools: nosetests --with-xunit --xunit-file nosetests-{envname}.xml -a 'cli_tools'

    # Jupyter tests also require the cli_tools
    jupyter: make cli_tools VENV={envdir}
    jupyter: sh tests/set_jupyter_kernel.sh {env:SINA_TEST_KERNEL} {envdir}
    jupyter: nosetests --with-xunit --xunit-file nosetests-{envname}.xml -a 'jupyter'

    # Make sure all nosetest results are flagged with the environment so they
    # are reported as separate results in Bamboo.
    sed -i.bak 's/testcase classname="\([^"]*\)/testcase classname="\1_{envname}/g' nosetests-{envname}.xml

# Jupyter is necessary for visualization.py, pylint, and docs
deps =
    -r{toxinidir}/requirements/development.txt
    -r{toxinidir}/requirements/jupyter.txt

install_command=python -m pip install {env:SINA_PIP_OPTIONS} {opts} {packages}

whitelist_externals=
    make
    sed
    sh

# Reminder:  Settings for test environments (e.g., [testenv:docs]) will default
# to those defined in [testenv].

[testenv:docs]
# Closely based on c2c tox.ini, workaround for LC Sphinx not supporting failing on warning
whitelist_externals=
    mkdir
    bash

# Have Sphinx skip documentation for Jupyter Notebook tests for now since it
# appears other tools are needed (e.g., nbsphinx).
commands=
# If the build succeeds, the files built here will be deployed as documentation
    mkdir -p build
    bash -c "sphinx-apidoc -efT -o docs/source/generated_docs sina/ .tox/"
    bash -c "sphinx-apidoc -efT -o docs/source/generated_docs tests/ .tox/  tests/jupyter_test.py"
    bash -c "sphinx-build docs/source docs/build/html | tee build/sphinx_out.txt"
    # Fail on warnings
    bash -c "! grep  -i WARNING build/sphinx_out.txt"
    # Fail on bad indentation
    bash -c "! egrep -Rl ':(param|return|ref)' docs/build/html/**/*.html"

[testenv:flake8]
skip_install = true
commands = flake8

[testenv:pep8]
basepython = python3
deps = pep8
commands = pep8

[testenv:pylint]
# When we switched from running our build with python 3 rather than python 2,
# we got a newer version of pylint. This newer version reported some
# python 3-specific issues, as well as some newly detected issues. To be
# able to switch our build while at the same time not rending pylint useless,
# we took a mixed approach of not jumping too many versions and not
# disabling too many checks. When we stop supporting python 2 with our
# library, we should remove the "--disable" flag, as well as remove the
# restriction on the version of pylint.
skip_install = true
commands =
    pylint --reports=y --ignore=.tox,pylint_venv,run_tests,test_venv sina tests \
        --disable=useless-object-inheritance,unnecessary-comprehension,no-else-return,unnecessary-pass,self-assigning-variable,no-else-raise,no-else-continue,import-outside-toplevel,deprecated-method,bad-mcs-classmethod-argument

# As mentioned above, the pylint version is restricted purely to strike a
# balance between getting a newer version than before and not introducing
# too many error at once.
deps = pylint<2.5

[flake8]
max-line-length = 99
exclude =
    .tox,
    docs,
    tests/pylint_venv,
    tests/run_tests,
    tests/test_venv,
    venv

[pep8]
max-line-length = 99
exclude =
    .tox,
    docs,
    tests/pylint_venv,
    tests/run_tests,
    tests/test_venv,
    venv
