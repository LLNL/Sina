namespace sina {
/**

\page tutorial Tutorial

This short tutorial walks you through the basic usage of the Sina library.
For more in-depth details, see the documentation for the individual classes,
such as Record, Relationship, and Document.

\tableofcontents

\section creation Creating Documents and Records

The basic working units in Sina are the Document, Record, and Relationship.
A Document is a collection of Records and Relationships. A Record contains
information about a particular entity, such as the run of an application,
or a description of a UQ study. A Relationship describes how two records
relate to each user (e.g. UQ studies contain runs).

This first example shows how to create a record:

\snippet tutorial.cpp create record

The record has an ID "some_record_id", which is unique to the enclosing
document (it will be replaced by a global ID upon ingestion). The only
required field for records is their type, which is "my_record_type" in this
case. Once created, a record can be added to a Document.

We can create Runs. Runs are special types of records. They have the required
fields of application ("My Sim Code"), version ("1.2.3"), and user ("jdoe").
The type is automatically set to "run".

\snippet tutorial.cpp create run

\section data Adding Data
Once we have a Record, we can add different types of data to it. Any Datum
object that is added will end up in the "data" section of the record in
the JSON file.

\snippet tutorial.cpp adding data

\section curve_sets Adding Curve Sets
While you can add data items that are vectors of numbers, sometimes you want
to express relationships between them. For example, you may want to express
the fact that a timeplot captures the fact that there is an independent
variable (e.g. "time"), and possibly multiple dependent variables (e.g.
"temperature" and "energy").

\snippet tutorial.cpp curve sets

\section relationships Relationships Between Records

Relationships between objects can be captured via the Relationship class.
This relates two records via a user-defined predicate. In the example below,
a new relashionship is created between two records: a UQ study and a run. The
study is said to "contain" the run. As a best practice, predicates should
be active verbs, such as "contains" in "the study contains the run", rather
than "is part of", as in "the run is part of the study".

\snippet tutorial.cpp relationships

\section library_data Library-Specific Data

Oftentimes, simulation codes are composed of multiple libraries. If those
offer a capability to collect data in a Sina document, you can leverage that
to expose this additional data in your records.

For example, suppose you are using libraries named \c foo and \c bar.
library \c foo defines \c collectData() like this:

\snippet tutorial.cpp library data foo

Library \c bar defines \c gatherData() like this:

\snippet tutorial.cpp library data bar

In your host application, you can define sections for \c foo and \c bar
to add their own data.

\snippet tutorial.cpp library data host

In the example above, once the record is ingested into a Sina datastore,
users will be able to search for "temperature" (value = 450),
"foo/temperature" (value = 500), and "bar/temperature" (value = 400).

\section io Input and Output

Once you have a document, it is easy to save it to a file. After executing
the below, your will output a file named "my_output.json" which you can ingest
into a Sina datastore.

\snippet tutorial.cpp io write

If needed, you can also load a document from a file. This can be useful,
for example, if you wrote a document when writing a restart and you want to
continue from where you left off.

\snippet tutorial.cpp io read

\section user_defined Non-Conforming, User-Defined Data
While the Sina format is capable of expressing and indexing lots of different
types of data, there may be special cases it doesn't cover well. If you want
to add extra data to a record but don't care if it doesn't get indexed, you
can add it to the "user_defined" section of records (or libraries of
a record). This is a JSON object that will be ignored by Sina for
processing purposes, but will be brought back with your record if you
retrieve it from a database.

Sina uses <a href="https://llnl-conduit.readthedocs.io/">Conduit</a> to
convert to and from JSON. The user-defined section is exposed as a Conduit
<a href="https://llnl-conduit.readthedocs.io/en/latest/tutorial_cpp_basics.html#node-basics">Node</a>

\snippet tutorial.cpp user defined

*/
}
